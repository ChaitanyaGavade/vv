------------------------------------HPC LA1------------------------------
I] BFS
Code:
#include<iostream>
#include<array>
#include<chrono>
#include<functional>
#include<string>
#include<bits/stdc++.h>
using namespace std;

string timeCalculator(function<void()> traversal_fn) {
    auto start = chrono::high_resolution_clock::now();
    traversal_fn();
    auto stop = chrono::high_resolution_clock::now();
    auto result = stop - start;
    auto duration = chrono::duration_cast<chrono::microseconds>(result);
    return to_string(duration.count());
}

// Direction vectors
int dRow[] = { -1, 0, 1, 0 };
int dCol[] = { 0, 1, 0, -1 };

// Function to check if a cell is visited or not
bool isValid(bool vis[][2], int row, int col) {
    // If cell lies out of bounds
    if (row < 0 || col < 0 || col >= 2)
        return false;
    // If cell is already visited
    if (vis[row][col])
        return false;
    // Otherwise
    return true;
}

// Function to perform sequential BFS traversal
void s_BFS(int grid[][2], bool vis[][2], int row, int col) {
    // Stores indices of the matrix cells
    queue<pair<int, int>> q;
    // Mark the starting cell as visited and push it into the queue
    q.push({ row, col });
    vis[row][col] = true;
    // Iterate while the queue is not empty
    while (!q.empty()) {
        pair<int, int> cell = q.front();
        int x = cell.first;
        int y = cell.second;
        q.pop();
        // Go to the adjacent cells
        for (int i = 0; i < 4; i++) {
            int adjx = x + dRow[i];
            int adjy = y + dCol[i];
            if (isValid(vis, adjx, adjy)) {
                q.push({ adjx, adjy });
                vis[adjx][adjy] = true;
            }
        }
    }
}

// Function to perform parallel BFS traversal
void p_BFS(int grid[][2], bool vis[][2], int row, int col) {
    // Stores indices of the matrix cells
    queue<pair<int, int>> q;
    // Mark the starting cell as visited and push it into the queue
    q.push({ row, col });
    vis[row][col] = true;
    // Iterate while the queue is not empty
#pragma omp parallel num_threads(2)
    while (!q.empty()) {
        pair<int, int> cell = q.front();
        int x = cell.first;
        int y = cell.second;
        //cout << grid[x][y] << " ";
        q.pop();
        // Go to the adjacent cells
#pragma omp parallel for
        for (int i = 0; i < 4; i++) {
            int adjx = x + dRow[i];
            int adjy = y + dCol[i];
            if (isValid(vis, adjx, adjy)) {
                q.push({ adjx, adjy });
                vis[adjx][adjy] = true;
            }
        }
    }
}

// Function for generating a graph and calling the traversal function
void Graphs(int NOEdge, int NOVertex) {
    int i, j, edge[NOEdge][2], count;
    i = 0;
    // Assign random values to the number of vertex and edges of the graph,Using rand().
    while (i < NOEdge) {
        edge[i][0] = rand() % NOVertex + 1;
        edge[i][1] = rand() % NOVertex + 1;
        // Print the connections of each vertex, irrespective of the direction.
        if (edge[i][0] == edge[i][1])
            continue;
        else {
            for (j = 0; j < i; j++) {
                if ((edge[i][0] == edge[j][0] && edge[i][1] == edge[j][1]) ||
                    (edge[i][0] == edge[j][1] && edge[i][1] == edge[j][0]))
                    i--;
            }
            i++;
        }
    }
    // Declare the visited array
    bool vis[NOEdge][2];
    memset(vis, false, sizeof vis);
    //calling the function for sequential traversal
    string time1 = timeCalculator([&] { s_BFS(edge, vis, NOEdge, 2); });
    cout << "\nSequential BFS Traversal " << time1 << " microseconds\n";
    //calling the function for parallel traversal
    string time2 = timeCalculator([&] { p_BFS(edge, vis, NOEdge, 2); });
    cout << "\nParallel BFS Traversal " << time2 << " microseconds\n";
}

int main() {
    int i, e, n;
    cout << "Enter the no of vertices" << endl;
    cin >> n;
    cout << "The graph has " << n << " vertices" << endl;
    e = rand() % ((n * (n - 1)) / 4);
    cout << "and has " << e << " edges." << endl;
    // Function call
    Graphs(e, n);
    return 0;
}


**********DFS**************
#include<iostream>
#include<array>
#include<chrono>
#include<functional>
#include<string>
#include<bits/stdc++.h>
using namespace std;

string timeCalculator(function<void()> traversal_fn) {
    auto start = chrono::high_resolution_clock::now();
    traversal_fn();
    auto stop = chrono::high_resolution_clock::now();
    auto result = stop - start;
    auto duration = chrono::duration_cast<chrono::nanoseconds>(result);
    return to_string(duration.count());
}

// Direction vectors
int dRow[] = { -1, 0, 1, 0 };
int dCol[] = { 0, 1, 0, -1 };

// Function to check if a cell is visited or not
bool isValid(bool vis[][2], int row, int col) {
    // If cell lies out of bounds
    if (row < 0 || col < 0 || col >= 2)
        return false;
    // If cell is already visited
    if (vis[row][col])
        return false;
    // Otherwise
    return true;
}

// Function to perform sequential DFS traversal
void s_DFS(int graph[][2], bool vis[][2], int row, int col) {
    // Initialize a stack of pairs and push the starting cell into it
    stack<pair<int, int>> st;
    st.push({ row, col });
    // Iterate until the stack is not empty
    while (!st.empty()) {
        // Pop the top pair
        pair<int, int> curr = st.top();
        st.pop();
        int row = curr.first;
        int col = curr.second;
        // Check if the current popped cell is a valid cell or not
        if (!isValid(vis, row, col))
            continue;
        // Mark the current cell as visited
        vis[row][col] = true;
        // Push all the adjacent cells
        for (int i = 0; i < 4; i++) {
            int adjx = row + dRow[i];
            int adjy = col + dCol[i];
            st.push({ adjx, adjy });
        }
    }
}

// Function to perform parallel DFS traversal
void p_DFS(int graph[][2], bool vis[][2], int row, int col) {
    // Initialize a stack of pairs and push the starting cell into it
    stack<pair<int, int>> st;
    st.push({ row, col });
    // Iterate until the stack is not empty
    while (!st.empty()) {
        // Pop the top pair
        pair<int, int> curr = st.top();
        st.pop();
        int row = curr.first;
        int col = curr.second;
        // Check if the current popped cell is a valid cell or not
        if (!isValid(vis, row, col))
            continue;
        // Mark the current cell as visited
        vis[row][col] = true;
        // Push all the adjacent cells
        for (int i = 0; i < 4; i++) {
            int adjx = row + dRow[i];
            int adjy = col + dCol[i];
            st.push({ adjx, adjy });
        }
    }
}

// Function for generating a graph and calling the traversal function
void Graphs(int NOEdge, int NOVertex) {
    int i, j, edge[NOEdge][2], count;
    i = 0;
    // Assign random values to the number of vertex and edges of the graph,Using rand().
    while (i < NOEdge) {
        edge[i][0] = rand() % NOVertex + 1;
        edge[i][1] = rand() % NOVertex + 1;
        // Print the connections of each vertex, irrespective of the direction.
        if (edge[i][0] == edge[i][1])
            continue;
        else {
            for (j = 0; j < i; j++) {
                if ((edge[i][0] == edge[j][0] && edge[i][1] == edge[j][1]) ||
                    (edge[i][0] == edge[j][1] && edge[i][1] == edge[j][0]))
                    i--;
            }
            i++;
        }
    }
    // Declare the visited array
    bool vis[NOEdge][2];
    memset(vis, false, sizeof vis);
    //calling the function for sequential traversal
    string time1 = timeCalculator([&] { s_DFS(edge, vis, NOEdge, 2); });
    cout << "\nSequential DFS Traversal " << time1 << " nanoseconds\n";
    //calling the function for parallel traversal
    string time2 = timeCalculator([&] { p_DFS(edge, vis, NOEdge, 2); });
    cout << "\nParallel DFS Traversal " << time2 << " nanoseconds\n";
}

int main() {
    int i, e, n;
    cout << "Enter the no of vertices" << endl;
    cin >> n;
    cout << "The graph has " << n << " vertices" << endl;
    e = rand() % ((n * (n - 1)) / 4);
    cout << "and has " << e << " edges." << endl;
    // Function call
    Graphs(e, n);
    return 0;
}

----------------------------------------HPC LA2 ---------------------------------------
***********BUBBLE SORT***********
#include <iostream>
#include <stdlib.h>
#include <array>
#include <functional>
#include <string>
#include <omp.h> // For the purpose of OpenMP
#include <chrono> // To calculate CPU execution time

using namespace std;

void s_bubble(int *, int);
void p_bubble(int *, int);
string timeCalculator(function<void()> sort_fn);

// Sequential Bubble Sort
void s_bubble(int *a, int n) {
    for (int i = 0; i < n; i++) {
        int first = i % 2;
        for (int j = first; j < n - 1; j += 2) {
            if (a[j] > a[j + 1]) {
                swap(a[j], a[j + 1]);
            }
        }
    }
}

// Parallel Bubble sort using shared directive and user-defined number of threads
void p_bubble(int *a, int n) {
    for (int i = 0; i < n; i++) {
        int first = i % 2;
        // Starting the parallel thread for loop
        // Number of threads are 2 due to the number of CPU cores
#pragma omp parallel for shared(a, first) num_threads(2)
        for (int j = first; j < n - 1; j += 2) {
            if (a[j] > a[j + 1]) {
                swap(a[j], a[j + 1]);
            }
        }
    }
}

string timeCalculator(function<void()> sort_fn) {
    auto start = chrono::high_resolution_clock::now();
    sort_fn();
    auto stop = chrono::high_resolution_clock::now();
    auto result = stop - start;
    auto duration = chrono::duration_cast<chrono::milliseconds>(result);
    return to_string(duration.count());
}

int main() {
    int *a, n;
    cout << "Specify array length." << endl;
    cin >> n;
    a = new int[n];
    // Creating array of random numbers for testing purpose
    for (int i = 0; i < n; i++) {
        a[i] = rand() % n;
    }
    cout << "Generated random array of length " << n << endl << endl;

    // Calling the function and calculating the time for sequential sort
    cout << "Sequential Bubble sort: " << timeCalculator([&] { s_bubble(a, n); }) << "ms" << endl;

    // Calling the function and calculating the time for parallel sort
    // Setting the number of threads before executing parallel programming
    omp_set_num_threads(2);
    cout << "Parallel (2) Bubble sort: " << timeCalculator([&] { p_bubble(a, n); }) << "ms" << endl;

    return 0;
}


*******************MERGE SORT************************

#include <iostream>
#include <stdlib.h>
#include <array>
#include <functional>
#include <string>
#include <chrono>
//For the purpose of OpenMP
#include <omp.h>

using namespace std;

// Function declarations
void p_mergesort(int a[], int i, int j);
void s_mergesort(int a[], int i, int j);
void merge(int a[], int i1, int j1, int i2, int j2);
void parallel_mergesort(int a[], int i, int j);
string timeCalculator(function<void()> sort_fn);

// Sequential merge sort
void s_mergesort(int a[], int i, int j) {
    int mid;
    if (i < j) {
        mid = (i + j) / 2;
        s_mergesort(a, i, mid);
        s_mergesort(a, mid + 1, j);
        merge(a, i, mid, mid + 1, j);
    }
}

// Parallel merge sort
void p_mergesort(int a[], int i, int j) {
    int mid;
    if (i < j) {
        if ((j - i) > 1000) {
            mid = (i + j) / 2;
#pragma omp task firstprivate(a, i, mid)
            p_mergesort(a, i, mid);
#pragma omp task firstprivate(a, mid, j)
            p_mergesort(a, mid + 1, j);
        }
    }
    else {
#pragma omp taskwait
        merge(a, i, mid, mid + 1, j);
        s_mergesort(a, i, j);
    }
}

// Parallel merge sort with OpenMP
void parallel_mergesort(int a[], int i, int j) {
#pragma omp parallel num_threads(2)
    {
#pragma omp single
        {
            p_mergesort(a, i, j);
        }
    }
}

// Function to merge the sorted array
void merge(int a[], int i1, int j1, int i2, int j2) {
    int temp[1000000];
    int i, j, k;
    i = i1;
    j = i2;
    k = 0;
    while (i <= j1 && j <= j2) {
        if (a[i] < a[j]) {
            temp[k++] = a[i++];
        }
        else {
            temp[k++] = a[j++];
        }
    }
    while (i <= j1) {
        temp[k++] = a[i++];
    }
    while (j <= j2) {
        temp[k++] = a[j++];
    }
    for (i = i1, j = 0; i <= j2; i++, j++) {
        a[i] = temp[j];
    }
}

// Function to calculate execution time
string timeCalculator(function<void()> sort_fn) {
    auto start = chrono::high_resolution_clock::now();
    sort_fn();
    auto stop = chrono::high_resolution_clock::now();
    auto result = stop - start;
    auto duration = chrono::duration_cast<chrono::microseconds>(result);
    return to_string(duration.count());
}

int main() {
    int *a, n, i;
    cout << "Specify array length." << endl;
    cin >> n;
    a = new int[n];
    // Generating array of random numbers for testing purpose
    for (int i = 0; i < n; i++) {
        a[i] = rand() % n;
    }
    cout << "Generated random array of length " << n << endl << endl;
    // Calling the function and calculating the time for sequential sort
    cout << "Sequential Merge sort: " << timeCalculator([&]{ s_mergesort(a, 0, n - 1); }) << " microseconds" << endl;
    // Calling the function and calculating the time for parallel sort
    // Setting the number of threads before executing parallel programming
    omp_set_num_threads(2);
    cout << "Parallel (2) Merge sort: " << timeCalculator([&]{ parallel_mergesort(a, 0, n - 1); }) << " microseconds" << endl;
    return 0;
}



----------------------------------------HPC LA3 ---------------------------------------

%%cu
#include <stdio.h>

global void reduce_min_max_sum_avg(int* input, int* output, int size) {
    shared int sdata[256];
    unsigned int tid = threadIdx.x;
    unsigned int i = blockIdx.x * blockDim.x + threadIdx.x;

    // Load input elements into shared memory
    sdata[tid] = (i < size) ? input[i] : 0;
    __syncthreads();

    // Parallel reduction in shared memory
    for (unsigned int s = blockDim.x / 2; s > 0; s >>= 1) {
        if (tid < s) {
            sdata[tid] = min(sdata[tid], sdata[tid + s]); // Min operation
            sdata[tid] = max(sdata[tid], sdata[tid + s]); // Max operation
            sdata[tid] += sdata[tid + s]; // Sum operation
        }
        __syncthreads();
    }

    // Write the reduced value to output
    if (tid == 0) {
        output[blockIdx.x] = sdata[0];
    }
}

int main() {
    int size = 1024; // Size of the input array
    int block_size = 256;
    int num_blocks = (size + block_size - 1) / block_size;

    // Generate input data
    int* input = new int[size];
    for (int i = 0; i < size; ++i) {
        input[i] = i + 1;
    }

    // Allocate device memory
    int* d_input;
    int* d_output;
    cudaMalloc((void**)&d_input, size * sizeof(int));
    cudaMalloc((void**)&d_output, num_blocks * sizeof(int));

    // Copy input data to device memory
    cudaMemcpy(d_input, input, size * sizeof(int), cudaMemcpyHostToDevice);

    // Launch kernel for parallel reduction
    reduce_min_max_sum_avg<<<num_blocks, block_size>>>(d_input, d_output, size);

    // Allocate host memory for output
    int* output = new int[num_blocks];

    // Copy output data from device memory to host memory
    cudaMemcpy(output, d_output, num_blocks * sizeof(int), cudaMemcpyDeviceToHost);

    // Perform reduction on host
    int min_val = output[0];
    int max_val = output[0];
    int sum_val = output[0];
    for (int i = 1; i < num_blocks; ++i) {
        min_val = min(min_val, output[i]); // Minimum value
        max_val = max(max_val, output[i]); // Maximum value
        sum_val += output[i]; // Sum value
    }

    float avg_val = static_cast<float>(sum_val) / size; // Average value
    printf("Min: %d\n", min_val);
    printf("Max: %d\n", max_val);
    printf("Sum: %d\n", sum_val);
    printf("Average: %.2f\n", avg_val);

    // Free device memory
    cudaFree(d_input);
    cudaFree(d_output);

    // Free host memory
    delete[] input;
    delete[] output;

    return 0;
}


----------------------------------------------HPC LA4----------------------------------------------------
***********ADDITION**********

%%cu
#include <stdio.h>

global void vecAdd(double *a, double *b, double *c, int n)
{
    int id = blockIdx.x * blockDim.x + threadIdx.x;
    if (id < n)
        c[id] = a[id] + b[id];
}

int main()
{
    int n = 100000;
    double *h_a, *h_b, *h_c;
    double *d_a, *d_b, *d_c;
    size_t bytes = n * sizeof(double);

    // Allocate memory on host
    h_a = (double *)malloc(bytes);
    h_b = (double *)malloc(bytes);
    h_c = (double *)malloc(bytes);

    // Allocate memory on device
    cudaMalloc(&d_a, bytes);
    cudaMalloc(&d_b, bytes);
    cudaMalloc(&d_c, bytes);

    // Initialize arrays on the host
    for (int i = 0; i < n; i++)
    {
        h_a[i] = i * i;
        h_b[i] = i * i;
    }

    // Copy arrays from host to device
    cudaMemcpy(d_a, h_a, bytes, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, h_b, bytes, cudaMemcpyHostToDevice);

    // Define grid and block dimensions
    int blockSize = 1024;
    int gridSize = (int)ceil((float)n / blockSize);

    // Launch kernel
    vecAdd<<<gridSize, blockSize>>>(d_a, d_b, d_c, n);

    // Copy result back to host
    cudaMemcpy(h_c, d_c, bytes, cudaMemcpyDeviceToHost);

    // Calculate sum
    double sum = 0;
    for (int i = 0; i < n; i++)
        sum += h_c[i];

    // Print result
    printf("final result: %f\n", sum / n);

    // Free memory
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
    free(h_a);
    free(h_b);
    free(h_c);

    return 0;
}


************MULTIPLICATION***************

%%cu
#include<stdio.h>
#include<cuda.h>

#define row1 2 /* Number of rows of first matrix */
#define col1 3 /* Number of columns of first matrix */
#define row2 3 /* Number of rows of second matrix */
#define col2 2 /* Number of columns of second matrix */

global void matproduct(int *l, int *m, int *n)
{
    int x = blockIdx.x;
    int y = blockIdx.y;
    int k;
    n[col2*y+x] = 0;
    for (k = 0; k < col1; k++)
    {
        n[col2*y+x] += l[col1*y+k] * m[col2*k+x];
    }
}

int main()
{
    int a[2][3] = {{1, 2, 3}, {4, 5, 6}};
    int b[3][2] = {{9, 8}, {7, 6}, {5, 4}};
    int c[2][2];

    int *d, *e, *f;
    int i, j;

    cudaMalloc((void )&d, row1 * col1 * sizeof(int));
    cudaMalloc((void )&e, row2 * col2 * sizeof(int));
    cudaMalloc((void **)&f, row1 * col2 * sizeof(int));

    cudaMemcpy(d, a, row1 * col1 * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(e, b, row2 * col2 * sizeof(int), cudaMemcpyHostToDevice);

    dim3 grid(col2, row1);

    matproduct<<<grid, 1>>>(d, e, f);

    cudaMemcpy(c, f, row1 * col2 * sizeof(int), cudaMemcpyDeviceToHost);

    printf("\nProduct of two matrices:\n");
    for (i = 0; i < row1; i++)
    {
        for (j = 0; j < col2; j++)
        {
            printf("%d\t", c[i][j]);
        }
        printf("\n");
    }

    cudaFree(d);
    cudaFree(e);
    cudaFree(f);

    return 0;
}